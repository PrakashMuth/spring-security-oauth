/*
 * This file is generated by jOOQ.
 */
package com.springsecurityoauth2.model.tables.daos;


import com.springsecurityoauth2.model.tables.UserRole;
import com.springsecurityoauth2.model.tables.records.UserRoleRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRoleDao extends DAOImpl<UserRoleRecord, com.springsecurityoauth2.model.tables.pojos.UserRole, Record2<Integer, Integer>> {

    /**
     * Create a new UserRoleDao without any configuration
     */
    public UserRoleDao() {
        super(UserRole.USER_ROLE, com.springsecurityoauth2.model.tables.pojos.UserRole.class);
    }

    /**
     * Create a new UserRoleDao with an attached configuration
     */
    public UserRoleDao(Configuration configuration) {
        super(UserRole.USER_ROLE, com.springsecurityoauth2.model.tables.pojos.UserRole.class, configuration);
    }

    @Override
    public Record2<Integer, Integer> getId(com.springsecurityoauth2.model.tables.pojos.UserRole object) {
        return compositeKeyRecord(object.getUserId(), object.getRoleId());
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.springsecurityoauth2.model.tables.pojos.UserRole> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.springsecurityoauth2.model.tables.pojos.UserRole> fetchByUserId(Integer... values) {
        return fetch(UserRole.USER_ROLE.USER_ID, values);
    }

    /**
     * Fetch records that have <code>role_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.springsecurityoauth2.model.tables.pojos.UserRole> fetchRangeOfRoleId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.ROLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_id IN (values)</code>
     */
    public List<com.springsecurityoauth2.model.tables.pojos.UserRole> fetchByRoleId(Integer... values) {
        return fetch(UserRole.USER_ROLE.ROLE_ID, values);
    }
}
